
include(${PROJECT_SOURCE_DIR}/cmake/FindBoost.cmake)
include(${PROJECT_SOURCE_DIR}/cmake/FindDirectX.cmake)

add_subdirectory(embed-resource)
# Source
aux_source_directory(util src_util)
source_group("Util" FILES ${src_util})

aux_source_directory(math src_math)
source_group("Math" FILES ${src_math})

aux_source_directory(core src_core)
source_group("core" FILES ${src_core})

aux_source_directory(renderer src_renderer)
source_group("renderer" FILES ${src_renderer})
aux_source_directory(2dengine src_2dengine)
source_group("2dengine" FILES ${src_2dengine})
aux_source_directory(3dengine src_3dengine)
source_group("3dengine" FILES ${src_3dengine})
aux_source_directory(io src_io)
source_group("io" FILES ${src_io})
aux_source_directory(npl src_npl)
source_group("npl" FILES ${src_npl})
aux_source_directory(parascriptbindings src_parascriptbindings)
source_group("parascriptbindings" FILES ${src_parascriptbindings})
aux_source_directory(sqlite3 src_sqlite3)
source_group("sqlite3" FILES ${src_sqlite3})
aux_source_directory(dir_monitor src_dir_monitor)
source_group("dir_monitor" FILES ${src_dir_monitor})
aux_source_directory(bmaxmodel src_bmaxmodel)
source_group("bmaxmodel" FILES ${src_bmaxmodel})
aux_source_directory(protocol src_protocol)
source_group("protocol" FILES ${src_protocol})

aux_source_directory(paraxmodel src_paraxmodel)
source_group("paraxmodel" FILES ${src_paraxmodel})
aux_source_directory(curllua src_curllua)
source_group("curllua" FILES ${src_curllua})
aux_source_directory(debugtools src_debugtools)
source_group("debugtools" FILES ${src_debugtools})
aux_source_directory(ic src_ic)
source_group("ic" FILES ${src_ic})
aux_source_directory(terrain src_terrain)
source_group("terrain" FILES ${src_terrain})
aux_source_directory(blockengine src_blockengine)
source_group("blockengine" FILES ${src_blockengine})
aux_source_directory(websocket src_websocket)
source_group("websocket" FILES ${src_websocket})
aux_source_directory(PaintEngine src_paintengine)
source_group("PaintEngine" FILES ${src_paintengine})
aux_source_directory(CadModel src_carmodel)
source_group("CadModel" FILES ${src_carmodel})

#res
file (GLOB src_res res/*.*)
set_source_files_properties(${src_res} PROPERTIES HEADER_FILE_ONLY TRUE)
set(src_res ParaEngineRes.rc ${src_res}	)
source_group("res" FILES ${src_res})

# ParaXmodel.templates
embed_resources_abs(MyResource res/ParaXmodel.templates)
list(APPEND EmbeddedResource_FILES ${MyResource})

embed_resources_abs(MyResource res/cursor.tga)
list(APPEND EmbeddedResource_FILES ${MyResource})

##############################
# Shader Header Files
file (GLOB src_shaderheaders shaders/*.h)
set_source_files_properties(${src_shaderheaders} PROPERTIES HEADER_FILE_ONLY TRUE)	

file (GLOB src_shaders ${src_shaderheaders}/shaders/*.fx)
	# custom build rules: effect FX files
	foreach( src_file ${src_shaderheaders} )
    get_filename_component(src_filename ${src_file} NAME_WE)
     set(out_file "${ParaEngineClient_SOURCE_DIR}/shaders/${src_filename}.fxo")
     set(ParaEngineClient_SHADER_BIN_FILES ${src_shaderheaders_bin} ${out_file})
     add_custom_command(
         OUTPUT ${out_file}
         COMMAND "${DirectX_INCLUDE_DIRS}/../Utilities/bin/x86/fxc" /Tfx_2_0 /Gfp /nologo /Fo ${out_file} ${src_file}
         # uncomment the following line if you want to see the text output to debug shader instructions.
         # COMMAND fxc /Tfx_2_0 /Gfp /nologo /Fc "${ParaEngineClient_SOURCE_DIR}/shaders/${src_filename}.txt" ${src_file}
         DEPENDS ${src_file}
         COMMENT "fxc compile: ${src_file}"
         )
     embed_resources_abs(MyResource "${ParaEngineClient_SOURCE_DIR}/shaders/${src_filename}.fxo")
     list(APPEND EmbeddedResource_FILES ${MyResource})
endforeach( src_file ${src_shaderheaders} )


set_source_files_properties(${src_shaderheaders_bin} PROPERTIES HEADER_FILE_ONLY TRUE)
list(APPEND ParaEngineClient_SRCS ${src_shaderheaders_bin})
SOURCE_GROUP("Shader Files\\Compiled Files" FILES ${src_shaderheaders_bin})



# For direct3d renderer
aux_source_directory(engine src_engine)

aux_source_directory(voxelmesh src_voxelmesh)
aux_source_directory(common src_common) #DirextX


list(APPEND EmbeddedResource_FILES ResourceEmbedded.cpp)
SOURCE_GROUP("ResEmbedded" FILES ${EmbeddedResource_FILES})


link_directories(${Boost_LIBRARY_DIRS} ${DirectX_LIBRARY_PATHS})

add_executable(ParaEngineCore
    ${src_util}
    ${src_math}
    ${src_core}
    ${src_renderer}
    ${src_2dengine}
    ${src_3dengine}
    ${src_io}
    ${src_npl}
    ${src_parascriptbindings}
    ${src_sqlite3}
    ${src_dir_monitor}
    ${src_bmaxmodel}
    ${src_protocol}
    ${src_paraxmodel}
    ${src_curllua}
    ${src_debugtools}
    ${src_ic}
    ${src_terrain}
    ${src_blockengine}
    ${src_websocket}
    ${src_engine}
    ${src_voxelmesh}
    ${src_common}
    ${src_paintengine}
    ${src_carmodel}
    ${src_res}
    ${src_shaderheaders}
    ${src_shaderheaders_bin}
    ${EmbeddedResource_FILES}
    
)

target_include_directories(ParaEngineCore PUBLIC
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/Framework/Interface/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/math/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/core/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/util/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/2dengine/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/3dengine/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/renderer/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/io/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/npl/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/sqlite3/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/parascriptbindings/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/dir_monitor/
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/bmaxmodel
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/protocol
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/paraxmodel
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/curllua
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/debugtools
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/ic
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/terrain
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/websocket
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/blockengine
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/engine
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/voxelmesh
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/common
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/PaintEngine
    ${PROJECT_SOURCE_DIR}/ParaEngineClient/CadModel

    ${PROJECT_SOURCE_DIR}/ParaEngineClient/embed-resource
    ${Boost_INCLUDE_DIR}/
    ${DirectX_INCLUDE_DIRS}
)

target_link_libraries(ParaEngineCore libcurl tinyxml tinyxpath liblua luabind zlib jsoncpp  ${Boost_LIBRARIES}
comctl32.lib
d3dxof.lib
dxguid.lib
d3d9.lib
d3dx9.lib
dinput8.lib
dxerr.lib
Dbghelp.lib
X3daudio.lib
wsock32.lib
VFW32.lib
SHLWAPI.lib
gdiplus.lib
Psapi.lib
)
target_compile_definitions(ParaEngineCore 
PUBLIC PE_CORE_EXPORTING
PUBLIC NPLRUNTIME
PUBLIC SQLITE_STATICLIB
PUBLIC USE_DIRECTX_RENDERER
PUBLIC _WIN32_WINNT=0x0501
PUBLIC PARAENGINE_CLIENT
PUBLIC BOOST_SIGNALS_NO_DEPRECATION_WARNING
PUBLIC PLATFORM_WINDOWS
PUBLIC USE_WINDOWS_SSPI
)


IF(MSVC)
# statically link MSVC to reduce dependancies
foreach(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)
    if(${flag_var} MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
    endif(${flag_var} MATCHES "/MD")
    if(${flag_var} MATCHES "/MDd")
        string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
    endif(${flag_var} MATCHES "/MDd")
endforeach(flag_var)

# /GR- Remove RTTI to miminize the executable size
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GR-")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")

# enable multiprocessor build option /MP, this will greatly increase compile speed
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MP")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MP")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MP")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MP")
ENDIF()