import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    aaptOptions {
        noCompress ".zip", ".pkg"
    }

    defaultConfig {
        applicationId "com.tatfook.paracraft"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 36
        versionName "2.0.20"

        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_shared", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_STUDIO=TRUE", "-DNPLRUNTIME_OCE=FALSE"
                cppFlags "-frtti -fexceptions -fsigned-char -std=c++11"
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    ndkVersion='23.1.7779620'

    sourceSets.main {
        java.srcDir "java"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDirs = ["assets"]
    }

    externalNativeBuild {
        cmake {
            version "3.22.3"
            path "../../../CMakeLists.txt"
        }
    }

    signingConfigs {
       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            manifestPlaceholders  = [ "libname" : "Paracraft" ]
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }

            manifestPlaceholders  = [ "libname" : "Paracraftd" ]
        }
    }

//    flavorDimensions "company"
//
//    productFlavors {
//        tatfook {
//            applicationId "com.paraengine.paracraft"
//            dimension "company"
//        }
//
//        paraengine {
//            applicationId "com.tatfook.paracraft"
//            dimension "company"
//        }
//    }
}

String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
Pattern pattern = Pattern.compile("assembleDebug")
Matcher matcher = pattern.matcher(taskReqStr)
Boolean isDebug = false

if (matcher.find()) {
    isDebug = true
}

android.applicationVariants.all { variant ->
    if (variant.buildType.isDebuggable()) {
        if (isDebug) {
            println "DEBUG MODE"
            println "${variant.dirName}"

            variant.mergeAssetsProvider.get().doLast {
                delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

                copy {
                   from "assets"
                   into "${buildDir}/intermediates/merged_assets/${variant.dirName}/out/"
                }

                if (System.properties["os.name"].toLowerCase().contains("windows")) {
                    if (file(System.properties["user.home"] + "\\ParacraftAndroidDev\\Dev.bat").exists()) {
                        exec {
                            workingDir System.properties['user.home'] + "\\ParacraftAndroidDev"
                            commandLine "cmd", "/c", "Dev.bat ${buildDir}\\intermediates\\merged_assets\\${variant.dirName}\\out\\"
                        }
                    }
                } else {
                    if (file(System.properties["user.home"] + "/ParacraftAndroidDev/Dev.sh").exists()) {
                        exec {
                            workingDir System.properties['user.home'] + "/ParacraftAndroidDev"
                            commandLine "sh", "./Dev.sh", "${buildDir}/intermediates/merged_assets/${variant.dirName}/out/"
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.jetbrains:annotations:17.0.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation 'com.github.smarxpan:NotchScreenTool:0.0.1'

    implementation ('com.shuyu:GSYVideoPlayer:8.1.2')
}

repositories {
    mavenCentral()
}
